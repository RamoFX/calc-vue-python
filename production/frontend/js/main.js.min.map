{"version":3,"sources":["main.ts"],"names":["isArray","arr","Array","isObject","obj","objEqual","obj1","obj2","JSON","stringify","range","from","to","include","rangeArray","i","push","compCalc","Vue","component","data","self","this","buttons","advanced","text","value","basic","controls","icon","key","method","async","eel","calcExp","calcInput","then","resolved","parse","status","details","alert","calcInputChange","mounted","map","v","window","addEventListener","e","which","length","document","target","localName","preventDefault","methods","mode","String","$i","querySelector","selStart","selectionStart","selEnd","selectionEnd","selOffset","newValue","slice","blur","focus","template","compIcon","props","goto","newRoute","$router","name","$mount"],"mappings":"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","file":"main.js","sourcesContent":["import '../packages/vue.js'\r\n\r\nconst isArray = (arr: any[]): boolean => {\r\n  return Array.isArray(arr)\r\n}\r\n\r\nconst isObject = (obj: Object): boolean => {\r\n  return typeof obj === 'object' && obj !== null\r\n}\r\n\r\n// Are two objects the same?\r\nconst objEqual = (obj1: Object, obj2: Object): boolean => {\r\n\r\n  return JSON.stringify(obj1) == JSON.stringify(obj2) ? true : false\r\n\r\n}\r\n\r\n// range(5, 7) -> [5, 6], range(5, 7, true) -> [5, 6, 7]\r\nconst range = (from: number, to: number, include: boolean = false): Array<number> => {\r\n  include === true ? to++ : null\r\n\r\n  let rangeArray = []\r\n\r\n  let i = from\r\n  while(i < to) {\r\n    rangeArray.push(i)\r\n    i++\r\n  }\r\n\r\n  return rangeArray\r\n}\r\ndeclare const calcExp: any\r\ndeclare const eel: any\r\n\r\nconst compCalc = Vue.component('comp-calc', {\r\n  data: function() {\r\n    const self = this\r\n\r\n    return {\r\n\r\n      buttons: {\r\n\r\n        advanced: [\r\n          {\r\n            text: 'sin',\r\n            value: 'sin(x)'\r\n          },\r\n          {\r\n            text: 'cos',\r\n            value: 'cos(x)'\r\n          },\r\n          {\r\n            text: 'tan',\r\n            value: 'tan(x)'\r\n          },\r\n          {\r\n            text: 'rad',\r\n            value: 'rad(deg)'\r\n          },\r\n          {\r\n            text: 'asin',\r\n            value: 'asin(x)'\r\n          },\r\n          {\r\n            text: 'acos',\r\n            value: 'acos(x)'\r\n          },\r\n          {\r\n            text: 'atan',\r\n            value: 'atan(x)'\r\n          },\r\n          {\r\n            text: 'deg',\r\n            value: 'deg(rad)'\r\n          },\r\n          {\r\n            text: 'x<sup>e</sup>',\r\n            value: 'x**e'\r\n          },\r\n          {\r\n            text: '&radic;x',\r\n            value: 'sqrt(x)'\r\n          },\r\n          {\r\n            text: '//',\r\n            value: '//'\r\n          },\r\n          {\r\n            text: '%',\r\n            value: '%'\r\n          }\r\n        ],\r\n\r\n        basic: [\r\n          {\r\n            text: '*'\r\n          },\r\n          {\r\n            text: '/'\r\n          },\r\n          {\r\n            text: '+'\r\n          },\r\n          {\r\n            text: '-'\r\n          }\r\n        ],\r\n\r\n        controls: [\r\n          {\r\n            icon: 'equal',\r\n            key: 13,\r\n            method: async function() {\r\n              const python_calcExp = await eel.calcExp((self as any).calcInput)\r\n\r\n              python_calcExp().then( (resolved) => {\r\n\r\n                resolved = JSON.parse(resolved)\r\n\r\n                if(resolved.status === 'ok') {\r\n                  (self as any).calcInput = resolved.details\r\n                } else if(resolved.status === 'error') {\r\n                  alert(resolved.details)\r\n                }\r\n\r\n              } )\r\n            }\r\n          },\r\n          {\r\n            icon: 'backspace-outline',\r\n            method: function() {\r\n              (self as any).calcInputChange('remove')\r\n            }\r\n          },\r\n          {\r\n            icon: 'tray-remove',\r\n            key: 27,\r\n            method: function() {\r\n              (self as any).calcInput = ''\r\n            }\r\n          }\r\n        ]\r\n\r\n      },\r\n\r\n      calcInput: ''\r\n\r\n    }\r\n  },\r\n\r\n  mounted: function(): void {\r\n    self = this\r\n\r\n    interface controlsObject {\r\n      key?: number,\r\n      method: Function\r\n    }\r\n\r\n    // listen for enter and esc keydown\r\n    this.buttons.controls.map((v: controlsObject, i: number): void => {\r\n      if(v.key) {\r\n        window.addEventListener('keydown', function(e): void {\r\n          e.which == v.key && (self as any).calcInput.length > 0 ? v.method() : null\r\n        })\r\n      }\r\n    })\r\n\r\n    // keep input focused even on click away\r\n    document.addEventListener('mousedown', e => {\r\n      (e as any).target.localName != 'input' ? e.preventDefault() : null\r\n    })\r\n  },\r\n\r\n  methods: {\r\n    calcInputChange: function(mode: string, value = undefined):void {\r\n      // number hasn't length prop so convert it to string\r\n      mode === 'add' ? value ? value = String(value) : '' : null\r\n\r\n      const $i = document.querySelector('input')\r\n      const selStart: number = $i.selectionStart\r\n      const selEnd: number = $i.selectionEnd\r\n\r\n      let selOffset: number = 0\r\n      let newValue: string = ''\r\n\r\n      if(mode === 'add') {\r\n\r\n        selOffset = value.length\r\n        newValue = `${ $i.value.slice(0, selStart) }${ value }${ $i.value.slice(selEnd, $i.value.length) }`\r\n\r\n      } else if(mode === 'remove') {\r\n\r\n        selOffset = selStart !== 0 && selStart === selEnd ? -1 : selStart !== selEnd ? 0 : null\r\n        newValue = `${ $i.value.slice(0, selStart + selOffset) }${ $i.value.slice(selEnd, $i.value.length) }`\r\n\r\n      }\r\n\r\n      this.calcInput = $i.value = newValue\r\n\r\n      // set caret position after inserted value\r\n      $i.selectionStart = $i.selectionEnd = selStart + selOffset\r\n      $i.blur()\r\n      $i.focus()\r\n    }\r\n  },\r\n\r\n  template: `\r\n    <div class=\"calc\">\r\n\r\n      <input\r\n        type=\"text\"\r\n        autocomplete=\"off\"\r\n        spellcheck=\"false\"\r\n        placeholder=\"Type an expression\"\r\n        v-model.trim=\"calcInput\"\r\n      />\r\n\r\n      <div class=\"calc-container\" rows>\r\n\r\n        <div class=\"calc-buttons-operators-advanced\" row>\r\n          <span\r\n            v-for=\"operator in buttons.advanced\"\r\n            v-html=\"operator.text\"\r\n            @click=\"calcInputChange('add', operator.value)\"\r\n          ></span>\r\n        </div>\r\n\r\n        <div class=\"calc-buttons-operators-basic\" row>\r\n          <span\r\n            v-for=\"operator in buttons.basic\"\r\n            v-html=\"operator.text\"\r\n            @click=\"calcInputChange('add', operator.text)\"\r\n          ></span>\r\n        </div>\r\n\r\n        <div class=\"calc-container-numbers-controls\" cols>\r\n\r\n          <div class=\"calc-buttons-numbers\" row>\r\n\r\n            <span\r\n              v-for=\"n of 9\"\r\n              v-html=\"n\"\r\n              @click=\"calcInputChange('add', n)\"\r\n            ></span>\r\n\r\n          </div>\r\n\r\n          <div class=\"calc-buttons-controls\" rows>\r\n\r\n            <comp-icon\r\n              v-for=\"control in buttons.controls\"\r\n              :key=\"'comp-icon_' + control.icon\"\r\n              :prop_icon=\"control.icon\"\r\n              prop_size=\"1-5\"\r\n              @click.native=\"calcInput.length > 0 ? control.method() : null\"\r\n            />\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  `\r\n})\r\nconst compIcon = Vue.component('comp-icon', {\r\n  props: ['prop_icon', 'prop_size', 'prop_class'],\r\n\r\n  template: `\r\n    <span\r\n      class=\"mdi\"\r\n      :class=\"[\r\n        'mdi-' + prop_icon,\r\n        prop_size ? 'icon-size-' + prop_size : '',\r\n        prop_class ? prop_class : ''\r\n      ]\"\r\n    ></span>\r\n  `\r\n})\r\nconst methods = {\r\n\r\n  goto: function(newRoute):void {\r\n    this.$router.push(newRoute)\r\n  }\r\n\r\n}\r\nconst template = `\r\n  <div id=\"wrapper\" jc=\"c\" ai=\"c\">\r\n\r\n    <comp-calc />\r\n\r\n  </div>\r\n`\r\n\r\nnew Vue({\r\n  name: 'application',\r\n  methods,\r\n  template\r\n}).$mount('#wrapper');"]}