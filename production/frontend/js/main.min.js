import"../packages/vue.js";const isArray=n=>Array.isArray(n),isObject=n=>"object"==typeof n&&null!==n,objEqual=(n,t)=>JSON.stringify(n)==JSON.stringify(t),range=(n,t,e=!1)=>{!0===e&&t++;let a=[],c=n;for(;c<t;)a.push(c),c++;return a},compCalc=Vue.component("comp-calc",{data:function(){const n=this;return{buttons:{advanced:[{text:"sin",value:"sin(x)"},{text:"cos",value:"cos(x)"},{text:"tan",value:"tan(x)"},{text:"rad",value:"rad(deg)"},{text:"asin",value:"asin(x)"},{text:"acos",value:"acos(x)"},{text:"atan",value:"atan(x)"},{text:"deg",value:"deg(rad)"},{text:"x<sup>e</sup>",value:"x**e"},{text:"&radic;x",value:"sqrt(x)"},{text:"//",value:"//"},{text:"%",value:"%"}],basic:[{text:"*"},{text:"/"},{text:"+"},{text:"-"}],controls:[{icon:"equal",key:13,method:async function(){(await eel.calcExp(n.calcInput))().then(t=>{"ok"===(t=JSON.parse(t)).status?n.calcInput=t.details:"error"===t.status&&alert(t.details)})}},{icon:"backspace-outline",method:function(){n.calcInputChange("remove")}},{icon:"tray-remove",key:27,method:function(){n.calcInput=""}}]},calcInput:""}},mounted:function(){self=this,this.buttons.controls.map((n,t)=>{n.key&&window.addEventListener("keydown",(function(t){t.which==n.key&&self.calcInput.length>0&&n.method()}))}),document.addEventListener("mousedown",n=>{"input"!=n.target.localName&&n.preventDefault()})},methods:{calcInputChange:function(n,t){"add"===n&&(t&&(t=String(t)));const e=document.querySelector("input"),a=e.selectionStart,c=e.selectionEnd;let o=0,l="";"add"===n?(o=t.length,l=`${e.value.slice(0,a)}${t}${e.value.slice(c,e.value.length)}`):"remove"===n&&(o=0!==a&&a===c?-1:a!==c?0:null,l=`${e.value.slice(0,a+o)}${e.value.slice(c,e.value.length)}`),this.calcInput=e.value=l,e.selectionStart=e.selectionEnd=a+o,e.blur(),e.focus()}},template:'\n    <div class="calc">\n\n      <input\n        type="text"\n        autocomplete="off"\n        spellcheck="false"\n        placeholder="Type an expression"\n        v-model.trim="calcInput"\n      />\n\n      <div class="calc-container" rows>\n\n        <div class="calc-buttons-operators-advanced" row>\n          <span\n            v-for="operator in buttons.advanced"\n            v-html="operator.text"\n            @click="calcInputChange(\'add\', operator.value)"\n          ></span>\n        </div>\n\n        <div class="calc-buttons-operators-basic" row>\n          <span\n            v-for="operator in buttons.basic"\n            v-html="operator.text"\n            @click="calcInputChange(\'add\', operator.text)"\n          ></span>\n        </div>\n\n        <div class="calc-container-numbers-controls" cols>\n\n          <div class="calc-buttons-numbers" row>\n\n            <span\n              v-for="n of 9"\n              v-html="n"\n              @click="calcInputChange(\'add\', n)"\n            ></span>\n\n          </div>\n\n          <div class="calc-buttons-controls" rows>\n\n            <comp-icon\n              v-for="control in buttons.controls"\n              :key="\'comp-icon_\' + control.icon"\n              :prop_icon="control.icon"\n              prop_size="1-5"\n              @click.native="calcInput.length > 0 ? control.method() : null"\n            />\n\n          </div>\n\n        </div>\n\n      </div>\n\n    </div>\n  '}),compIcon=Vue.component("comp-icon",{props:["prop_icon","prop_size","prop_class"],template:"\n    <span\n      class=\"mdi\"\n      :class=\"[\n        'mdi-' + prop_icon,\n        prop_size ? 'icon-size-' + prop_size : '',\n        prop_class ? prop_class : ''\n      ]\"\n    ></span>\n  "}),methods={goto:function(n){this.$router.push(n)}},template='\n  <div id="wrapper" jc="c" ai="c">\n\n    <comp-calc />\n\n  </div>\n';new Vue({name:"application",methods:methods,template:template}).$mount("#wrapper");
//# sourceMappingURL=main.js.min.map
